<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>deepspeed下transformers加载模型from_preprained方法解析</title>
    <link href="/2024/11/09/deepspeed%E4%B8%8Btransformers%E5%8A%A0%E8%BD%BD%E6%A8%A1%E5%9E%8Bfrom-preprained%E6%96%B9%E6%B3%95%E8%A7%A3%E6%9E%90/"/>
    <url>/2024/11/09/deepspeed%E4%B8%8Btransformers%E5%8A%A0%E8%BD%BD%E6%A8%A1%E5%9E%8Bfrom-preprained%E6%96%B9%E6%B3%95%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="前言-from-pretrained结构"><a href="#前言-from-pretrained结构" class="headerlink" title="前言 from_pretrained结构"></a>前言 from_pretrained结构</h1><p>由于显存不够，利用deepspeed的zero3-offload可以将模型参数存到cpu内存里。</p><p>在未使用deepspeed时，模型加载这一步就已经out of memory了，而使用了deepspeed后，模型能够成功加载。说明从加载模型，deepspeed开始起了作用。</p><p>llama_factory项目中的代码（LLaMA-Factory&#x2F;src&#x2F;llamafactory&#x2F;model&#x2F;loader.py(160行左右)），这里就是加载模型的地方：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">load_class</span> = AutoModelForCausalLM<br><span class="hljs-attr">model</span> = load_class.from_pretrained(**init_kwargs)<br></code></pre></td></tr></table></figure><p>pdb从from_pretrained方法s命令进到函数定义，就到transformers包里的内容了</p><p>然后来到（python3.11&#x2F;site-packages&#x2F;transformers&#x2F;models&#x2F;auto&#x2F;auto_factory.py（566））：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino">model_class = _get_model_class(config, cls._model_mapping)<br>            pdb.<span class="hljs-built_in">set_trace</span>()<br>            <span class="hljs-keyword">return</span> model_class.<span class="hljs-built_in">from_pretrained</span>(<br>                pretrained_model_name_or_path, *model_args, config=config, **hub_kwargs, **kwargs<br>            )<br></code></pre></td></tr></table></figure><p>把model_class打印出来看：</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">(Pdb) p model<span class="hljs-number">_</span><span class="hljs-keyword">class</span><br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;transformers.models.llama.modeling_llama.LlamaForCausalLM&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p>继续进from_pretrained函数定义（site-packages&#x2F;transformers&#x2F;modeling_ut<br>ils.py（2894行）），代码行数看着比较多，但是很多代码可能只是一些定义、初始化，关键的代码就是三个函数，分别实现了这三个功能：</p><ol><li>检查点文件加载到缓存</li><li>模型类的实例化，为模型参数在内存分配空间</li><li>参数的赋值</li></ol><h1 id="get-checkpoint-shard-files"><a href="#get-checkpoint-shard-files" class="headerlink" title="get_checkpoint_shard_files"></a>get_checkpoint_shard_files</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># resolved_archive_file becomes a list of files that point to the different checkpoint shards in this case.</span><br>resolved_archive_file, sharded_metadata = get_checkpoint_shard_files(<br>    pretrained_model_name_or_path,<br>    resolved_archive_file,<br>    <span class="hljs-attribute">cache_dir</span>=cache_dir,<br>    <span class="hljs-attribute">force_download</span>=force_download,<br>    <span class="hljs-attribute">proxies</span>=proxies,<br>    <span class="hljs-attribute">resume_download</span>=resume_download,<br>    <span class="hljs-attribute">local_files_only</span>=local_files_only,<br>    <span class="hljs-attribute">token</span>=token,<br>    <span class="hljs-attribute">user_agent</span>=user_agent,<br>    <span class="hljs-attribute">revision</span>=revision,<br>    <span class="hljs-attribute">subfolder</span>=subfolder,<br>    <span class="hljs-attribute">_commit_hash</span>=commit_hash,<br>)<br></code></pre></td></tr></table></figure><p>这里执行完可以把这两个变量都打印出来看：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-punctuation">(</span>Pdb<span class="hljs-punctuation">)</span> p resolved_archive_file<br>[&#x27;/home/dell/sdb/.cache/Meta-Llama-3-8B-Instruct/model-<span class="hljs-number">0000</span>1-of-<span class="hljs-number">0000</span>4.safetensors&#x27;<span class="hljs-punctuation">,</span> &#x27;/home/dell/sdb/.cache/Meta-Llama-3-8B-Instruct/model-<span class="hljs-number">0000</span>2-of-<span class="hljs-number">0000</span>4.safetensors&#x27;<span class="hljs-punctuation">,</span> &#x27;/home/dell/sdb/.cache/Meta-Llama-3-8B-Instruct/model-<span class="hljs-number">0000</span>3-of-<span class="hljs-number">0000</span>4.safetensors&#x27;<span class="hljs-punctuation">,</span> &#x27;/home/dell/sdb/.cache/Meta-Llama-3-8B-Instruct/model-<span class="hljs-number">0000</span>4-of-<span class="hljs-number">0000</span>4.safetensors&#x27;]<br><br><br><span class="hljs-punctuation">(</span>Pdb<span class="hljs-punctuation">)</span> p sharded_metadata<br>&#123;&#x27;total_size&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">16060522496</span><span class="hljs-punctuation">,</span> &#x27;all_checkpoint_keys&#x27;<span class="hljs-punctuation">:</span> [&#x27;lm_head.weight&#x27;<span class="hljs-punctuation">,</span> &#x27;model.embed_tokens.weight&#x27;<span class="hljs-punctuation">,</span> &#x27;model.layers.0.input_layernorm.weight&#x27;<span class="hljs-punctuation">,</span> &#x27;model.layers.0.mlp.down_proj.weight&#x27;<span class="hljs-punctuation">,</span> &#x27;model.layers.0.mlp.gate_proj.weight&#x27;<span class="hljs-punctuation">,</span> &#x27;model.layers.0.mlp.up_proj.weight&#x27;<span class="hljs-punctuation">,</span> &#x27;model.layers.0.post_attention_layernorm.weight&#x27;<span class="hljs-punctuation">,</span><br>... ...<br>&#x27;model.layers.9.post_attention_layernorm.weight&#x27;<span class="hljs-punctuation">:</span> &#x27;model-<span class="hljs-number">0000</span>2-of-<span class="hljs-number">0000</span>4.safetensors&#x27;<span class="hljs-punctuation">,</span> &#x27;model.layers.9.self_attn.k_proj.weight&#x27;<span class="hljs-punctuation">:</span> &#x27;model-<span class="hljs-number">0000</span>2-of-<span class="hljs-number">0000</span>4.safetensors&#x27;<span class="hljs-punctuation">,</span> &#x27;model.layers.9.self_attn.o_proj.weight&#x27;<span class="hljs-punctuation">:</span> &#x27;model-<span class="hljs-number">0000</span>2-of-<span class="hljs-number">0000</span>4.safetensors&#x27;<span class="hljs-punctuation">,</span> &#x27;model.layers.9.self_attn.q_proj.weight&#x27;<span class="hljs-punctuation">:</span> &#x27;model-<span class="hljs-number">0000</span>2-of-<span class="hljs-number">0000</span>4.safetensors&#x27;<span class="hljs-punctuation">,</span> &#x27;model.layers.9.self_attn.v_proj.weight&#x27;<span class="hljs-punctuation">:</span> &#x27;model-<span class="hljs-number">0000</span>2-of-<span class="hljs-number">0000</span>4.safetensors&#x27;<span class="hljs-punctuation">,</span> &#x27;model.norm.weight&#x27;<span class="hljs-punctuation">:</span> &#x27;model-<span class="hljs-number">0000</span>4-of-<span class="hljs-number">0000</span>4.safetensors&#x27;<br><br>]&#125;<br></code></pre></td></tr></table></figure><p>相当于这个函数完成了把检查点文件加载到缓存中，并且得到了模型具体哪个参数位于哪个检查点文件的信息。</p><h1 id="model类的实例化"><a href="#model类的实例化" class="headerlink" title="model类的实例化"></a>model类的实例化</h1><p>deepspeed设置了一下上下文，然后进行类的实例化：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada">init_contexts = [deepspeed.zero.Init(config_dict_or_path=deepspeed_config())] + init_contexts<br><span class="hljs-keyword">with</span> ContextManagers(init_contexts):<br>    # Let<span class="hljs-symbol">&#x27;s</span> make sure we don<span class="hljs-symbol">&#x27;t</span> run the init <span class="hljs-keyword">function</span> <span class="hljs-title">of</span> buffer modules<br>    model = cls(config, *model_args, **model_kwargs)<br></code></pre></td></tr></table></figure><p>deepspeed.zero.Init方法中值得关注的地方在于local_device和remote_device两个概念，这里pdb打印出来可以看到， local_device对应cuda装置，remote_device对应cpu，它作为上下文来实例化模型类，那模型加载如何使用cpu和gpu的代码必然在cls里面了。</p><p>把cls打印出来看看，cls就是这个类的初始化方法。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">(Pdb) p cls<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;transformers.models.llama.modeling_llama.LlamaForCausalLM&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p>pdb s命令进入cls，python用得少的话可能看不懂这里，这是wrapper装饰器，相当于封装了一层，实际会执行f函数，这套代码里面会有比较多的这种用法，看习惯就好了：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">@functools</span>.wraps(f)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params"><span class="hljs-keyword">module</span>, *args, **kwargs</span>):<br>    ... ...<br>        f(<span class="hljs-keyword">module</span>, *args, **kwargs)<br>    ... ...<br><br>    <span class="hljs-keyword">return</span> wrapper<br></code></pre></td></tr></table></figure><p>f函数就是类的初始化了：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">(Pdb) p f<br>&lt;<span class="hljs-keyword">function</span> <span class="hljs-title">LlamaForCausalLM.__init__</span> at 0x7233bc15e8e0&gt;<br></code></pre></td></tr></table></figure><p>经过几层的封装，来到了这个函数（deepspeed&#x2F;runtime&#x2F;zero&#x2F;partition_parameters.py（1076）），dist.broadcast应该是用于进程之间通信，这里一张显卡可能还不涉及到：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scss">def <span class="hljs-built_in">_post_init_method</span>(self, module):<br>    ...<br>    for name, param in module.<span class="hljs-built_in">named_parameters</span>(recurse=False):<br>    ...<br>        self.<span class="hljs-built_in">_zero_init_param</span>(param)<br>    ...<br><br>def <span class="hljs-built_in">_zero_init_param</span>(self, param):<br>    self.<span class="hljs-built_in">_convert_to_deepspeed_param</span>(param)<br>    if dist.<span class="hljs-built_in">get_world_group</span>() == self.<span class="hljs-built_in">get_dp_process_group</span>():<br>        dist.<span class="hljs-built_in">broadcast</span>(param.data, <span class="hljs-number">0</span>, self.<span class="hljs-built_in">get_dp_process_group</span>())<br>    else:<br>        dist.<span class="hljs-built_in">broadcast</span>(param.data, dist.<span class="hljs-built_in">get_global_rank</span>(self.<span class="hljs-built_in">get_dp_process_group</span>(), <span class="hljs-number">0</span>),<br>                        self.<span class="hljs-built_in">get_dp_process_group</span>())<br>    param.<span class="hljs-built_in">partition</span>()<br></code></pre></td></tr></table></figure><p>又经过了几层的函数封装，到了分配内存的函数，这里把param.device打印出来看是cuda，把partitioned_tensor.device打印出来看是cpu，这个函数做的事情是，把param里的东西写到了param.ds_tensor（ds是deepspeed缩写），然后释放了param内存(gpu)，tensor.pin_memory分配了内存（cpu）。这里不确定的地方在于，参数是直接从缓存写到了cpu内存，还是先从缓存写到显存，再写到cpu内存。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@instrument_w_nvtx</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_partition_param</span>(<span class="hljs-params">self, param, buffer=<span class="hljs-literal">None</span>, has_been_updated=<span class="hljs-literal">False</span></span>):<br>   <br>        tensor_size = <span class="hljs-variable language_">self</span>._aligned_size(param)<br>        partition_size = tensor_size // <span class="hljs-variable language_">self</span>.num_partitions<br>        <span class="hljs-keyword">if</span> param.ds_tensor <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            final_location = <span class="hljs-literal">None</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.remote_device == OffloadDeviceEnum.nvme <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.param_swapper.swappable_tensor(<br>                    numel=partition_size):<br>                ...<br><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> param.ds_persist:<br>                    device = <span class="hljs-variable language_">self</span>.local_device<br>                <span class="hljs-keyword">elif</span> <span class="hljs-variable language_">self</span>.remote_device == OffloadDeviceEnum.nvme:<br>                    device = OffloadDeviceEnum.cpu<br>                <span class="hljs-keyword">else</span>:<br>                    device = <span class="hljs-variable language_">self</span>.remote_device<br><br>                partitioned_tensor = torch.empty(partition_size, dtype=param.dtype, device=device)<br>                <br><br>                <span class="hljs-keyword">if</span> device == OffloadDeviceEnum.cpu <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.pin_memory:<br>                    partitioned_tensor = get_accelerator().pin_memory(partitioned_tensor)<br><br>            partitioned_tensor.requires_grad = <span class="hljs-literal">False</span><br>            param.ds_tensor = partitioned_tensor<br>            param.ds_tensor.ds_numel = partition_size<br>            param.ds_tensor.status = PartitionedParamStatus.AVAILABLE<br>            param.ds_tensor.final_location = final_location<br>            param.ds_numel_aligned = tensor_size<br><br><br></code></pre></td></tr></table></figure><p>partition_size &#x3D; tensor_size &#x2F;&#x2F; self.num_partitions相当于是参数分区，这里self.num_partitions值为1，相当于所有参数都会存到cpu。如果是不用cpu，而是用几张显卡，可能会将参数分区到不同显卡中。</p><h1 id="参数赋值"><a href="#参数赋值" class="headerlink" title="参数赋值"></a>参数赋值</h1><p>既然已经在cpu分配好内存了，把param打印出来看会发现都是0，后面的操作肯定是赋值了。</p><p>_load_pretrained_model函数(transformers&#x2F;modeling_utils.py(4381))里面有一段代码就是遍历每个检查点文件，将参数赋值的过程：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">for</span> shard_file <span class="hljs-keyword">in</span> resolved_archive_file:<br>        # Skip the load <span class="hljs-keyword">for</span> shards that only contain disk-offloaded weights when using safetensors <span class="hljs-keyword">for</span> the offload.<br>        <span class="hljs-keyword">if</span> shard_file <span class="hljs-keyword">in</span> disk_only_shard_files:<br>            continue<br>        state_dict = load_state_dict(shard_file, <span class="hljs-attribute">is_quantized</span>=is_quantized)<br><br>        # Mistmatched keys contains tuples key/shape1/shape2 of weights <span class="hljs-keyword">in</span> the checkpoint that have a shape <span class="hljs-keyword">not</span><br>        # matching the weights <span class="hljs-keyword">in</span> the model.<br>        mismatched_keys += _find_mismatched_keys(<br>            state_dict,<br>            model_state_dict,<br>            original_loaded_keys,<br>            add_prefix_to_model,<br>            remove_prefix_from_model,<br>            ignore_mismatched_sizes,<br>        )<br>        <span class="hljs-keyword">if</span> low_cpu_mem_usage:<br>            <span class="hljs-keyword">if</span> is_fsdp_enabled() <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> is_local_dist_rank_0() <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> is_quantized:<br>                <span class="hljs-keyword">for</span> key, param <span class="hljs-keyword">in</span> model_to_load.state_dict().items():<br>                    <span class="hljs-keyword">if</span> param.device == torch.device(<span class="hljs-string">&quot;meta&quot;</span>):<br>                        set_module_tensor_to_device(<br>                            model_to_load, key, <span class="hljs-string">&quot;cpu&quot;</span>, torch.empty(*param.size(), <span class="hljs-attribute">dtype</span>=dtype)<br>                        )<br>            <span class="hljs-keyword">else</span>:<br>                new_error_msgs, offload_index, state_dict_index = _load_state_dict_into_meta_model(<br>                    model_to_load,<br>                    state_dict,<br>                    loaded_keys,<br>                    start_prefix,<br>                    expected_keys,<br>                    <span class="hljs-attribute">device_map</span>=device_map,<br>                    <span class="hljs-attribute">offload_folder</span>=offload_folder,<br>                    <span class="hljs-attribute">offload_index</span>=offload_index,<br>                    <span class="hljs-attribute">state_dict_folder</span>=state_dict_folder,<br>                    <span class="hljs-attribute">state_dict_index</span>=state_dict_index,<br>                    <span class="hljs-attribute">dtype</span>=dtype,<br>                    <span class="hljs-attribute">hf_quantizer</span>=hf_quantizer,<br>                    <span class="hljs-attribute">is_safetensors</span>=is_safetensors,<br>                    <span class="hljs-attribute">keep_in_fp32_modules</span>=keep_in_fp32_modules,<br>                    <span class="hljs-attribute">unexpected_keys</span>=unexpected_keys,<br>                )<br>                error_msgs += new_error_msgs<br>        <span class="hljs-keyword">else</span>:<br>            # Sharded checkpoint <span class="hljs-keyword">or</span> whole but <span class="hljs-attribute">low_cpu_mem_usage</span>==True<br>            <span class="hljs-keyword">if</span> assign_to_params_buffers is None:<br>                assign_to_params_buffers = check_support_param_buffer_assignment(<br>                    model_to_load, state_dict, start_prefix<br>                )<br>            error_msgs += _load_state_dict_into_model(<br>                model_to_load, state_dict, start_prefix, assign_to_params_buffers<br>            )<br><br>        # force memory release<br>        del state_dict<br>        gc.collect()<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vim开发环境配置</title>
    <link href="/2024/10/20/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/10/20/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>定义跳转工具:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">ctags -<span class="hljs-attribute">R</span> .<br></code></pre></td></tr></table></figure><p>通过ctrl+]便能实现跳转</p><p>vim插件管理工具下载：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">curl -fLo ~/.<span class="hljs-keyword">vim</span>/autoload/plug.<span class="hljs-keyword">vim</span> --create-dirs \<br>https://raw.githubusercontent.<span class="hljs-keyword">com</span>/junegunn/<span class="hljs-keyword">vim</span>-plug/master/plug.<span class="hljs-keyword">vim</span><br></code></pre></td></tr></table></figure><p>修改vim配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ~/.vimrc<br></code></pre></td></tr></table></figure><p>将下面代码粘贴到vimrc文件中，代码自动补全，显示行号等功能：</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs leaf">call plug<span class="hljs-punctuation">#</span><span class="hljs-keyword">begin</span><span class="hljs-params">(&#x27;~<span class="hljs-operator">/</span>.<span class="hljs-variable">vim</span><span class="hljs-operator">/</span><span class="hljs-variable">plugged</span>&#x27;)</span><br><br>&quot; Python 语法高亮和缩进<br>Plug &#x27;sheerun/vim-polyglot&#x27;<br><br>&quot; 自动补全（需要配合 coc.nvim 使用）<br>Plug &#x27;neoclide/coc.nvim&#x27;, &#123;&#x27;branch&#x27;: &#x27;release&#x27;&#125;<br><br>&quot; Python 代码格式化（集成 Black）<br>Plug &#x27;psf/black&#x27;, &#123;&#x27;branch&#x27;: &#x27;main&#x27;&#125;<br><br>&quot; Python Linting（集成 flake8）<br>Plug &#x27;dense-analysis/ale&#x27;<br><br>call plug<span class="hljs-punctuation">#</span><span class="hljs-keyword">end</span><span class="hljs-params">()</span><br><br>set number<br>&quot; 实现回车键自动补全代码<br>inoremap &lt;silent&gt;&lt;expr&gt; &lt;CR&gt; pumvisible() ? coc<span class="hljs-punctuation">#</span><span class="hljs-keyword">_select_confirm</span><span class="hljs-params">()</span> : &quot;\&lt;CR&gt;&quot;<br></code></pre></td></tr></table></figure><p>接下来，命令行输入vim，安装插件：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:PlugInstall</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/10/19/hello-world/"/>
    <url>/2024/10/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
